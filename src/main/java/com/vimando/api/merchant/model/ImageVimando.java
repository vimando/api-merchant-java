/*
 * Merchant API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.vimando.api.merchant.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ImageVimando
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-09-08T08:43:24.704+02:00")
public class ImageVimando extends Parameter implements Serializable {
  private static final long serialVersionUID = 1L;

  @JsonProperty("cut")
  private Cut cut = null;

  /**
   * Gets or Sets filters
   */
  public enum FiltersEnum {
    SEPIA("sepia"),
    
    GRAYSCALE("grayscale"),
    
    FLIPH("fliph");

    private String value;

    FiltersEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FiltersEnum fromValue(String text) {
      for (FiltersEnum b : FiltersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("filters")
  private List<FiltersEnum> filters = null;

  @JsonProperty("type")
  private String type = "ImageVimando";

  public ImageVimando cut(Cut cut) {
    this.cut = cut;
    return this;
  }

   /**
   * Get cut
   * @return cut
  **/
  @ApiModelProperty(value = "")
  public Cut getCut() {
    return cut;
  }

  public void setCut(Cut cut) {
    this.cut = cut;
  }

  public ImageVimando filters(List<FiltersEnum> filters) {
    this.filters = filters;
    return this;
  }

  public ImageVimando addFiltersItem(FiltersEnum filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<FiltersEnum>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @ApiModelProperty(value = "")
  public List<FiltersEnum> getFilters() {
    return filters;
  }

  public void setFilters(List<FiltersEnum> filters) {
    this.filters = filters;
  }

  public ImageVimando type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageVimando imageVimando = (ImageVimando) o;
    return Objects.equals(this.cut, imageVimando.cut) &&
        Objects.equals(this.filters, imageVimando.filters) &&
        Objects.equals(this.type, imageVimando.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cut, filters, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageVimando {\n");

    sb.append("    cut: ").append(toIndentedString(cut)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

